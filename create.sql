CREATE TABLE Administrator (
   Username VARCHAR(30),
   Pwd VARCHAR(100), --generated by php code in the webapp, therefore no further checks required
   PRIMARY KEY  (username)
);

CREATE TABLE Senate (
SenateID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
Name VARCHAR(40),
AssignedSector VARCHAR(40) NOT NULL,
PRIMARY KEY (SenateID)
);

CREATE TABLE Law (
SenateID INTEGER,
ReferenceCode INTEGER,
Denomination VARCHAR(50),
Content CLOB,
PRIMARY KEY (SenateID, ReferenceCode),
FOREIGN KEY (SenateID) REFERENCES Senate(SenateID) ON DELETE CASCADE
);


CREATE SEQUENCE CID
START WITH 1;

CREATE TABLE Court  (
CourtID INTEGER,
Name VARCHAR(40),
AssignedSector VARCHAR(40) NOT NULL,
AreaofLaw VARCHAR(80) NOT NULL,
PRIMARY KEY (CourtID)
);

CREATE OR REPLACE TRIGGER t_cid BEFORE INSERT ON Court
FOR EACH ROW
BEGIN
SELECT CID.NEXTVAL
INTO :NEW.CourtID
FROM DUAL;
END;
/

CREATE TABLE ZIPcode (
    ZIPcode Integer,
    City VARCHAR(30),
    Planet VARCHAR(30),
    PRIMARY KEY (ZIPcode)
);

CREATE SEQUENCE UnionID
START WITH 1;

CREATE TABLE Unionemployee (
EmployeeID INTEGER DEFAULT UnionID.NEXTVAL, --Insertion policy: First insert Unionemployee, then Child, then next Entry in Unionemployee 
SocialSecurity INTEGER UNIQUE,
TelephoneNumber INTEGER UNIQUE,
Jobdescription VARCHAR(40) NOT NULL,
FirstName VARCHAR(30) NOT NULL,
Surname VARCHAR(30) NOT NULL,
Street VARCHAR(70),
HouseNumber INTEGER NOT NULL,
ComplexNumber INTEGER,
DoorNumber INTEGER,
ZIPcode Integer NOT NULL,
PRIMARY KEY (EmployeeID),
FOREIGN KEY (ZIPcode) REFERENCES ZIPcode(ZIPcode)
);

CREATE OR REPLACE TRIGGER complex_doornull BEFORE INSERT OR UPDATE ON Unionemployee --switches Entries for DoorNumber, that were mistakenly entered in Complex Number (i.e. Doornumber == NULL) back into the corresponding place
FOR EACH ROW
BEGIN
IF ((NOT :NEW.ComplexNumber IS NULL) AND :NEW.DoorNumber IS NULL) THEN
:NEW.DoorNumber := :NEW.ComplexNumber;
:NEW.ComplexNumber := NULL;
END IF;
END;
/


CREATE TABLE Soldier (
EmployeeID INTEGER,
Rank VARCHAR(20) NOT NULL,
Department VARCHAR(40) NOT NULL,
AssignedSector VARCHAR(40) NOT NULL,
CommandingOfficerID INTEGER,
PRIMARY KEY (EmployeeID),
FOREIGN KEY (EmployeeID) REFERENCES Unionemployee(EmployeeID),
FOREIGN KEY (CommandingOfficerID) REFERENCES Soldier(EmployeeID)
);


CREATE TABLE Politician  (
EmployeeID INTEGER,
Party VARCHAR(40),
Title VARCHAR(30),
SenateID INTEGER,
PRIMARY KEY (EmployeeID),
FOREIGN KEY (EmployeeID) REFERENCES Unionemployee(EmployeeID) ON DELETE
CASCADE,
FOREIGN KEY (SenateID) REFERENCES Senate(SenateID)
);

CREATE TABLE JudicialOfficer (
EmployeeID INTEGER,
Title VARCHAR(30),
Jobexperience INTEGER,
ExperienceTimeUnit VARCHAR(30),
CourtID INTEGER,
PRIMARY KEY (EmployeeID),
FOREIGN KEY (EmployeeID)REFERENCES Unionemployee(EmployeeID) ON DELETE
CASCADE,
FOREIGN KEY (CourtID) REFERENCES Court (CourtID)
);

CREATE TABLE Mission (
MissionID INTEGER GENERATED BY DEFAULT AS IDENTITY,
Goal VARCHAR(100) NOT NULL,
Budget INTEGER NOT NULL,
PRIMARY KEY (MissionID),
CHECK(Budget > 0)
);

CREATE TABLE carryout (
MissionID INTEGER,
EmployeeID INTEGER,
PRIMARY KEY (MissionID, EmployeeID),
FOREIGN KEY (MissionID) REFERENCES Mission(MissionID) ON DELETE CASCADE,
FOREIGN KEY (EmployeeID) REFERENCES Soldier(EmployeeID)
);

CREATE TABLE rule (
EmployeeID INTEGER NOT NULL, --Insertion Policy: only most Senior Officer of a Group is entered per Sector/Senate
CourtID INTEGER,
SenateID INTEGER,
PRIMARY KEY (EmployeeID, CourtID),
FOREIGN KEY (EmployeeID) REFERENCES Soldier(EmployeeID),
FOREIGN KEY (CourtID) REFERENCES Court (CourtID),
FOREIGN KEY (SenateID) REFERENCES Senate(SenateID)
);


CREATE VIEW MilitaryDepartmentSize AS (
	SELECT Department, COUNT(Department) AS Soldiers
	FROM Soldier
	GROUP BY Department
	HAVING COUNT(Department) > 0
);


CREATE VIEW Troops AS (
	SELECT EmployeeID, COUNT(l) AS Troops
		FROM (SELECT level AS l, EmployeeID
				FROM Soldier
				START WITH EmployeeID IN (SELECT EmployeeID From Soldier)
				CONNECT BY PRIOR  CommandingOfficerID = EmployeeID) 
		GROUP BY EmployeeID);

CREATE VIEW powerfulSectors AS (
    SELECT SenateID, AssignedSector, Armee
    FROM (SELECT SenateID,  SUM(Troops) AS Armee 
			FROM (SELECT SenateID, EmployeeID, Troops  FROM (
						SELECT EmployeeID, SenateID, COUNT(EmployeeID)
						FROM rule GROUP BY SenateID, EmployeeID)
    				NATURAL JOIN Troops)
            GROUP BY SenateID
            HAVING SUM(Troops) >= ROUND(((SELECT COUNT(*) FROM Soldier)/4),0))
    NATURAL JOIN Senate
);


CREATE OR REPLACE PROCEDURE insertSoldier(  fname IN UNIONEMPLOYEE.FIRSTNAME%TYPE,
                                            sname IN UNIONEMPLOYEE.SURNAME%TYPE,
                                            socialsec IN UNIONEMPLOYEE.SOCIALSECURITY%TYPE,
                                            telephone IN UNIONEMPLOYEE.TELEPHONENUMBER%TYPE,
                                            jobdescr IN UNIONEMPLOYEE.JOBDESCRIPTION%TYPE,
                                            str IN UNIONEMPLOYEE.STREET%TYPE,
                                            house IN UNIONEMPLOYEE.HOUSENUMBER%TYPE,
                                            complex IN UNIONEMPLOYEE.COMPLEXNUMBER%TYPE,
                                            door IN UNIONEMPLOYEE.DOORNUMBER%TYPE,
                                            zip IN UNIONEMPLOYEE.ZIPCODE%TYPE,
                                            rnk IN SOLDIER.RANK%TYPE,
                                            dep IN SOLDIER.DEPARTMENT%TYPE,
                                            sector IN SOLDIER.ASSIGNEDSECTOR%TYPE,
                                            officerid IN SOLDIER.COMMANDINGOFFICERID%TYPE)
IS
    eid UNIONEMPLOYEE.EMPLOYEEID%TYPE;
BEGIN
    INSERT INTO UNIONEMPLOYEE VALUES (UNIONID.NEXTVAL, socialsec, telephone, jobdescr, fname, sname, str, house, complex, door, zip) RETURNING EMPLOYEEID INTO eid;
    INSERT INTO SOLDIER VALUES (eid, rnk, dep, sector, officerid);
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE insertJudicialOfficer(  fname IN UNIONEMPLOYEE.FIRSTNAME%TYPE,
                                                    sname IN UNIONEMPLOYEE.SURNAME%TYPE,
                                                    socialsec IN UNIONEMPLOYEE.SOCIALSECURITY%TYPE,
                                                    telephone IN UNIONEMPLOYEE.TELEPHONENUMBER%TYPE,
                                                    jobdescr IN UNIONEMPLOYEE.JOBDESCRIPTION%TYPE,
                                                    str IN UNIONEMPLOYEE.STREET%TYPE,
                                                    house IN UNIONEMPLOYEE.HOUSENUMBER%TYPE,
                                                    complex IN UNIONEMPLOYEE.COMPLEXNUMBER%TYPE,
                                                    door IN UNIONEMPLOYEE.DOORNUMBER%TYPE,
                                                    zip IN UNIONEMPLOYEE.ZIPCODE%TYPE,
                                                    jtitle IN JUDICIALOFFICER.TITLE%TYPE,
                                                    exp IN JUDICIALOFFICER.JOBEXPERIENCE%TYPE,
                                                    exptunit IN JUDICIALOFFICER.EXPERIENCETIMEUNIT%TYPE,
                                                    cid IN JUDICIALOFFICER.COURTID%TYPE)
    IS
    eid UNIONEMPLOYEE.EMPLOYEEID%TYPE;
BEGIN
    INSERT INTO UNIONEMPLOYEE VALUES (UNIONID.NEXTVAL, socialsec, telephone, jobdescr, fname, sname, str, house, complex, door, zip) RETURNING EMPLOYEEID INTO eid;
    INSERT INTO JUDICIALOFFICER VALUES (eid, jtitle, exp, exptunit, cid);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE insertPolitician(   fname IN UNIONEMPLOYEE.FIRSTNAME%TYPE,
                                                sname IN UNIONEMPLOYEE.SURNAME%TYPE,
                                                socialsec IN UNIONEMPLOYEE.SOCIALSECURITY%TYPE,
                                                telephone IN UNIONEMPLOYEE.TELEPHONENUMBER%TYPE,
                                                jobdescr IN UNIONEMPLOYEE.JOBDESCRIPTION%TYPE,
                                                str IN UNIONEMPLOYEE.STREET%TYPE,
                                                house IN UNIONEMPLOYEE.HOUSENUMBER%TYPE,
                                                complex IN UNIONEMPLOYEE.COMPLEXNUMBER%TYPE,
                                                door IN UNIONEMPLOYEE.DOORNUMBER%TYPE,
                                                zip IN UNIONEMPLOYEE.ZIPCODE%TYPE,
                                                ptitle IN POLITICIAN.TITLE%TYPE,
                                                polparty IN POLITICIAN.PARTY%TYPE,
                                                seid IN POLITICIAN.SENATEID%TYPE)
    IS
    eid UNIONEMPLOYEE.EMPLOYEEID%TYPE;
BEGIN
    INSERT INTO UNIONEMPLOYEE VALUES (UNIONID.NEXTVAL, socialsec, telephone, jobdescr, fname, sname, str, house, complex, door, zip) RETURNING EMPLOYEEID INTO eid;
    INSERT INTO POLITICIAN VALUES (eid, ptitle, polparty, seid);
    COMMIT;
END;
/
